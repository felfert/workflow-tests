# Reusable workflow for checking versions of a cargo project.
#
# Implemeted logic:
#
# Usecase 1: If reftype is 'tag' (the version is in refname):
#  1. Check refname for SEMVER compliance
#  2. Compare package.version of all specified tomls to refname and fail, if they are different
#
# Usecase 2: If reftype is 'branch':
#  1. Verify, that all specified tomls have the same package.version

name: Check Versions

on:
  workflow_call:
    inputs:
      tomls:
        description: 'A JSON-encoded array of paths to toml files to be checked'
        required: true
        type: string
      # The following two parameters exist only so that they can be overridden
      # by an invoking test workflow.
      reftype:
        description: 'The github.ref_type'
        required: false
        type: string
        default: ${{ github.ref_type }}
      refname:
        description: 'The github.ref_name'
        required: false
        type: string
        default: ${{ github.ref_name }}
 
jobs:
  checkparam:
    name: Validate parameter
    runs-on: ubuntu-latest
    outputs:
      firsttoml: ${{ steps.getfirst.outputs.firsttoml }}
    steps:
      - id: checkparam
        run: |
          if [[ "${{ startsWith(inputs.tomls, '[') && endsWith(inputs.tomls, ']') }}" != 'true' ]] ; then
            echo '::error::Parameter tomls must be a JSON-encoded array'
            exit 1
          fi
      - id: debug
        if: steps.checkparam.conclusion == 'success'
        run: |
          echo "setps.checkparam=${{ toJson(steps.checkparam) }}"
      - id: getfirst
        if: ${{ steps.checkparam.conclusion == 'success' }}
        run: |
          echo "firsttoml=${{ fromJson(inputs.tomls)[0] }}" >> "$GITHUB_OUTPUT"

  semver:
    name: Validate SEMVER compliance
    needs: [checkparam]
    if: ${{ inputs.reftype == 'tag' }}
    runs-on: ubuntu-latest
    steps:
      - uses: rubenesp87/semver-validation-action@0.1.0
        with:
          version: ${{ inputs.refname }}

  getversion:
    needs: [checkparam, semver]
    runs-on: ubuntu-latest
    # See https://github.com/actions/runner/issues/491 for an explanation of
    # the following weird conditional expression:
    if: |
      always() && !cancelled() && (needs.checkparam.result == 'success') &&
      (needs.semver.result == 'success' || needs.semver.result == 'skipped')
    outputs:
      version: ${{ steps.setversion.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: readtoml
        if: ${{ needs.semver.result == 'skipped' && needs.checkparam.firsttoml != '' }}
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: "${{ fromJson(inputs.tomls)[0] }}"
          field: 'package.version'
      - id: setversion
        run: |
          if [[ -n "${{ steps.readtoml.outputs.value }}" ]] ; then
            echo "version=${{ steps.readtoml.outputs.value }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=${{ inputs.refname }}" >> "$GITHUB_OUTPUT"
          fi

  tomls:
    needs: [checkparam, semver, getversion]
    runs-on: ubuntu-latest
    # See https://github.com/actions/runner/issues/491 for an explanation of
    # the following weird conditional expression:
    if: |
      always() && !cancelled() && (needs.checkparam.result == 'success') &&
      (needs.getversion.result == 'success') &&
      (needs.semver.result == 'success' || needs.semver.result == 'skipped')
    strategy:
      matrix:
        file: ${{ fromJson(inputs.tomls) }}
    steps:
      - uses: actions/checkout@v3
      - id: readtoml
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: "${{ matrix.file }}"
          field: 'package.version'
      - run: |
          if [[ "${{ steps.readtoml.outputs.value }}" != "${{ needs.getversion.outputs.version }}" ]] ; then
            echo "::error::Versions do not match: specified=${{ needs.getversion.outputs.version }}, read=${{ steps.readtoml.outputs.value }}"
            exit 1
          fi
