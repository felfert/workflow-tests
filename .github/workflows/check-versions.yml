name: Check Versions

on:
  workflow_call:
    inputs:
      tomls:
        description: 'A JSON-encoded array of paths to toml files to be checked'
        required: true
        type: string
      reftype:
        description: 'The github.ref_type'
        required: true
        type: string
      refname:
        description: 'The github.ref_name to validate'
        required: true
        type: string
 
jobs:
  semver:
    name: Validate SEMVER compliance
    runs-on: ubuntu-latest
    outputs:
      toml: ${{ steps.notag.outputs.toml }}
    steps:
      - id: istag
        if: ${{ inputs.reftype == 'tag' }}
        uses: rubenesp87/semver-validation-action@0.1.0
        with:
          version: ${{ inputs.refname }}
      - id: notag
        if: ${{ inputs.reftype != 'tag' }}
        run: |
          echo "toml=${{ fromJson(inputs.tomls)[0] }}" >> "$GITHUB_OUTPUT"
          echo '::warning::Validation skipped, because reftype != "tag"'


  getversion:
    needs: [semver]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setversion.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: readtoml
        if: ${{ needs.semver.outputs.toml != '' }}
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: ${{ needs.semver.outputs.toml }}
          field: 'package.version'
      - id: setversion
        run: |
          if [[ -n "${{ needs.semver.outputs.toml }}" ]] ; then
            echo "version=${{ steps.readtoml.outputs.value }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=${{ inputs.refname }}" >> "$GITHUB_OUTPUT"
          fi

  tomls:
    needs: [getversion]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(inputs.tomls) }}
    steps:
      - uses: actions/checkout@v3
      - id: readtoml
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: ${{ matrix.file }}
          field: 'package.version'
      - run: |
          if [[ "${{ steps.readtoml.outputs.value }}" != "${{ needs.getversion.outputs.version }}" ]] ; then
            echo "::error::Versions do not match: specified=${{ needs.getversion.outputs.version }}, read=${{ steps.readtoml.outputs.value }}"
            exit 1
          fi
